[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mag-mcp-server"
version = "0.1.0"
description = "MCP server for indexing and querying C# codebases using Ollama embeddings and RAG"
readme = "README.md"
requires-python = ">=3.14"
license = { text = "MIT" }
authors = [
    { name = "MAG Team" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.14",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "mcp>=1.0.0",
    "qdrant-client>=1.9.0",
    "ollama>=0.3.0",
    "tree-sitter>=0.22.0",
    "tree-sitter-c-sharp>=0.21.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "tiktoken>=0.7.0",
    "gitpython>=3.1.0",
    "pathspec>=0.12.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.23.0",
    "ruff>=0.5.0",
    "mypy>=1.11.0",
]

[project.scripts]
mag-index = "mag.scripts.index_codebase:main"
mag-server = "mag.server:main"

[tool.hatch.build.targets.wheel]
packages = ["src/mag"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--cov=mag",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.mypy]
python_version = "3.14"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
strict_concatenate = true

[[tool.mypy.overrides]]
module = [
    "qdrant_client.*",
    "ollama.*",
    "tree_sitter.*",
    "tree_sitter_c_sharp.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src/mag"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
